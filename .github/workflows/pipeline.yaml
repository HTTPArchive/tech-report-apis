name: Tech Report API Pipeline

on: [push]

env:
  PIPELINE_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  PIPELINE_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  PIPELINE_PROJECT_DATABASE_DEV: ${{ secrets.GCP_PROJECT_DATABASE_DEV }}
  PIPELINE_PROJECT_DATABASE_PROD: ${{ secrets.GCP_PROJECT_DATABASE_PROD }}
  PIPELINE_GOOGLE_SERVICE_ACCOUNT_CLOUD_FUNCTIONS: ${{ secrets.GCP_SERVICE_ACCOUNT_CLOUD_FUNCTIONS }}
  PIPELINE_GOOGLE_SERVICE_ACCOUNT_API_GATEWAY: ${{ secrets.GCP_SERVICE_ACCOUNT_API_GATEWAY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
      - name: Test with pytest
        run: |
          python -m pytest -W "ignore"

  deploy_development:
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    needs: [test]
    defaults:
      run:
        working-directory: ./terraform/dev
    steps:
      - uses: actions/checkout@v4
      - name: Google Cloud Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.PIPELINE_PROJECT_ID }}
          credentials_json: ${{ env.PIPELINE_SA_KEY }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -var="google_service_account_cloud_functions=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_CLOUD_FUNCTIONS }}" \
                                   -var="google_service_account_api_gateway=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_API_GATEWAY }}" \
                                   -var="project_database=${{ env.PIPELINE_PROJECT_DATABASE_DEV }}"
        continue-on-error: true

      - name: Terraform Plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -var="google_service_account_cloud_functions=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_CLOUD_FUNCTIONS }}" \
                          -var="google_service_account_api_gateway=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_API_GATEWAY }}" \
                          -var="project_database=${{ env.PIPELINE_PROJECT_DATABASE_DEV }}" \
                          -auto-approve

  deploy_production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [test]
    defaults:
      run:
        working-directory: ./terraform/prod
    steps:
      - uses: actions/checkout@v4
      - name: Google Cloud Auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ env.PIPELINE_PROJECT_ID }}
          credentials_json: ${{ env.PIPELINE_SA_KEY }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -var="google_service_account_cloud_functions=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_CLOUD_FUNCTIONS }}" \
                                    -var="google_service_account_api_gateway=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_API_GATEWAY }}" \
                                    -var="project_database=${{ env.PIPELINE_PROJECT_DATABASE_PROD }}"
        continue-on-error: true

      - name: Terraform Plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -var="google_service_account_cloud_functions=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_CLOUD_FUNCTIONS }}" \
                          -var="google_service_account_api_gateway=${{ env.PIPELINE_GOOGLE_SERVICE_ACCOUNT_API_GATEWAY }}" \
                          -var="project_database=${{ env.PIPELINE_PROJECT_DATABASE_PROD }}" \
                          -auto-approve

